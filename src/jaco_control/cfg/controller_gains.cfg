#! /usr/bin/env python

# *******************************************************************
# Author: Sahand Rezaei-Shoshtari
# Oct. 2019
# Copyright 2019, Sahand Rezaei-Shoshtari, All rights reserved.
# *******************************************************************

PACKAGE = "jaco_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Velocity controller gains
velocity_gains = gen.add_group("Velocity Controller Gains")

# K_p gains
velocity_gains.add("velocity_K_p_1", double_t, 0, "Velocity controller: P gain for joint 1", 5., 0., 200.)
velocity_gains.add("velocity_K_p_2", double_t, 0, "Velocity controller: P gain for joint 2", 5., 0., 200.)
velocity_gains.add("velocity_K_p_3", double_t, 0, "Velocity controller: P gain for joint 3", 5., 0., 200.)
velocity_gains.add("velocity_K_p_4", double_t, 0, "Velocity controller: P gain for joint 4", 5., 0., 200.)
velocity_gains.add("velocity_K_p_5", double_t, 0, "Velocity controller: P gain for joint 5", 5., 0., 200.)
velocity_gains.add("velocity_K_p_6", double_t, 0, "Velocity controller: P gain for joint 6", 5., 0., 200.)
velocity_gains.add("velocity_K_p_7", double_t, 0, "Velocity controller: P gain for joint 7", 5., 0., 200.)

# K_d gains
velocity_gains.add("velocity_K_d_1", double_t, 0, "Velocity controller: D gain for joint 1", 1., 0., 50.)
velocity_gains.add("velocity_K_d_2", double_t, 0, "Velocity controller: D gain for joint 2", 1., 0., 50.)
velocity_gains.add("velocity_K_d_3", double_t, 0, "Velocity controller: D gain for joint 3", 1., 0., 50.)
velocity_gains.add("velocity_K_d_4", double_t, 0, "Velocity controller: D gain for joint 4", 1., 0., 50.)
velocity_gains.add("velocity_K_d_5", double_t, 0, "Velocity controller: D gain for joint 5", 1., 0., 50.)
velocity_gains.add("velocity_K_d_6", double_t, 0, "Velocity controller: D gain for joint 6", 1., 0., 50.)
velocity_gains.add("velocity_K_d_7", double_t, 0, "Velocity controller: D gain for joint 7", 1., 0., 50.)

# Feedforward torque controller gains
fftorque_gains = gen.add_group("Feedforward Torque Controller Gains")

# K_p gains
fftorque_gains.add("fftorque_K_p_1", double_t, 0, "Feedforward torque controller: P gain for joint 1", 45., 0., 200.)
fftorque_gains.add("fftorque_K_p_2", double_t, 0, "Feedforward torque controller: P gain for joint 2", 45., 0., 200.)
fftorque_gains.add("fftorque_K_p_3", double_t, 0, "Feedforward torque controller: P gain for joint 3", 45., 0., 200.)
fftorque_gains.add("fftorque_K_p_4", double_t, 0, "Feedforward torque controller: P gain for joint 4", 10., 0., 200.)
fftorque_gains.add("fftorque_K_p_5", double_t, 0, "Feedforward torque controller: P gain for joint 5", 10., 0., 200.)
fftorque_gains.add("fftorque_K_p_6", double_t, 0, "Feedforward torque controller: P gain for joint 6", 10., 0., 200.)
fftorque_gains.add("fftorque_K_p_7", double_t, 0, "Feedforward torque controller: P gain for joint 7", 10., 0., 200.)

# K_d gains
fftorque_gains.add("fftorque_K_d_1", double_t, 0, "Feedforward torque controller: D gain for joint 1", 4.,  0., 50.)
fftorque_gains.add("fftorque_K_d_2", double_t, 0, "Feedforward torque controller: D gain for joint 2", 4.,  0., 50.)
fftorque_gains.add("fftorque_K_d_3", double_t, 0, "Feedforward torque controller: D gain for joint 3", 4.,  0., 50.)
fftorque_gains.add("fftorque_K_d_4", double_t, 0, "Feedforward torque controller: D gain for joint 4", 1.5, 0., 50.)
fftorque_gains.add("fftorque_K_d_5", double_t, 0, "Feedforward torque controller: D gain for joint 5", 1.5, 0., 50.)
fftorque_gains.add("fftorque_K_d_6", double_t, 0, "Feedforward torque controller: D gain for joint 6", 1.5, 0., 50.)
fftorque_gains.add("fftorque_K_d_7", double_t, 0, "Feedforward torque controller: D gain for joint 7", 1.5, 0., 50.)

# Impedance controller joint space gains
impedance_gains = gen.add_group("Impedance Controller Task Space Gains")

# K_p gains
impedance_gains.add("impedance_K_p_x", double_t, 0, "Impedance controller: P gain for x", 10., 0., 200.)
impedance_gains.add("impedance_K_p_y", double_t, 0, "Impedance controller: P gain for y", 10., 0., 200.)
impedance_gains.add("impedance_K_p_z", double_t, 0, "Impedance controller: P gain for z", 10., 0., 200.)
impedance_gains.add("impedance_K_p_w_x", double_t, 0, "Impedance controller: P gain for w_x", 10., 0., 200.)
impedance_gains.add("impedance_K_p_w_y", double_t, 0, "Impedance controller: P gain for w_y", 10., 0., 200.)
impedance_gains.add("impedance_K_p_w_z", double_t, 0, "Impedance controller: P gain for w_z", 10., 0., 200.)

# K_d gains
impedance_gains.add("impedance_K_d_x", double_t, 0, "Impedance controller: D gain for x", 1.,  0., 50.)
impedance_gains.add("impedance_K_d_y", double_t, 0, "Impedance controller: D gain for y", 1.,  0., 50.)
impedance_gains.add("impedance_K_d_z", double_t, 0, "Impedance controller: D gain for z", 1.,  0., 50.)
impedance_gains.add("impedance_K_d_w_x", double_t, 0, "Impedance controller: D gain for w_x", 1.,  0., 50.)
impedance_gains.add("impedance_K_d_w_y", double_t, 0, "Impedance controller: D gain for w_y", 1.,  0., 50.)
impedance_gains.add("impedance_K_d_w_z", double_t, 0, "Impedance controller: D gain for w_z", 1.,  0., 50.)


exit(gen.generate(PACKAGE, "jaco_controller", "controller_gains"))
