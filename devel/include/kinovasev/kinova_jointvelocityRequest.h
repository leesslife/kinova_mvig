// Generated by gencpp from file kinovasev/kinova_jointvelocityRequest.msg
// DO NOT EDIT!


#ifndef KINOVASEV_MESSAGE_KINOVA_JOINTVELOCITYREQUEST_H
#define KINOVASEV_MESSAGE_KINOVA_JOINTVELOCITYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kinovasev
{
template <class ContainerAllocator>
struct kinova_jointvelocityRequest_
{
  typedef kinova_jointvelocityRequest_<ContainerAllocator> Type;

  kinova_jointvelocityRequest_()
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , joint5(0.0)
    , joint6(0.0)
    , joint7(0.0)
    , kinova_s(0)  {
    }
  kinova_jointvelocityRequest_(const ContainerAllocator& _alloc)
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , joint5(0.0)
    , joint6(0.0)
    , joint7(0.0)
    , kinova_s(0)  {
  (void)_alloc;
    }



   typedef float _joint1_type;
  _joint1_type joint1;

   typedef float _joint2_type;
  _joint2_type joint2;

   typedef float _joint3_type;
  _joint3_type joint3;

   typedef float _joint4_type;
  _joint4_type joint4;

   typedef float _joint5_type;
  _joint5_type joint5;

   typedef float _joint6_type;
  _joint6_type joint6;

   typedef float _joint7_type;
  _joint7_type joint7;

   typedef int64_t _kinova_s_type;
  _kinova_s_type kinova_s;





  typedef boost::shared_ptr< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> const> ConstPtr;

}; // struct kinova_jointvelocityRequest_

typedef ::kinovasev::kinova_jointvelocityRequest_<std::allocator<void> > kinova_jointvelocityRequest;

typedef boost::shared_ptr< ::kinovasev::kinova_jointvelocityRequest > kinova_jointvelocityRequestPtr;
typedef boost::shared_ptr< ::kinovasev::kinova_jointvelocityRequest const> kinova_jointvelocityRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator1> & lhs, const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint1 == rhs.joint1 &&
    lhs.joint2 == rhs.joint2 &&
    lhs.joint3 == rhs.joint3 &&
    lhs.joint4 == rhs.joint4 &&
    lhs.joint5 == rhs.joint5 &&
    lhs.joint6 == rhs.joint6 &&
    lhs.joint7 == rhs.joint7 &&
    lhs.kinova_s == rhs.kinova_s;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator1> & lhs, const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kinovasev

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f1bdf5ffa4f16671879a6eaed0b2939";
  }

  static const char* value(const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f1bdf5ffa4f1667ULL;
  static const uint64_t static_value2 = 0x1879a6eaed0b2939ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinovasev/kinova_jointvelocityRequest";
  }

  static const char* value(const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 joint1\n"
"float32 joint2\n"
"float32 joint3\n"
"float32 joint4\n"
"float32 joint5\n"
"float32 joint6\n"
"float32 joint7\n"
"int64 kinova_s\n"
;
  }

  static const char* value(const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint1);
      stream.next(m.joint2);
      stream.next(m.joint3);
      stream.next(m.joint4);
      stream.next(m.joint5);
      stream.next(m.joint6);
      stream.next(m.joint7);
      stream.next(m.kinova_s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kinova_jointvelocityRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinovasev::kinova_jointvelocityRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint1: ";
    Printer<float>::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    Printer<float>::stream(s, indent + "  ", v.joint2);
    s << indent << "joint3: ";
    Printer<float>::stream(s, indent + "  ", v.joint3);
    s << indent << "joint4: ";
    Printer<float>::stream(s, indent + "  ", v.joint4);
    s << indent << "joint5: ";
    Printer<float>::stream(s, indent + "  ", v.joint5);
    s << indent << "joint6: ";
    Printer<float>::stream(s, indent + "  ", v.joint6);
    s << indent << "joint7: ";
    Printer<float>::stream(s, indent + "  ", v.joint7);
    s << indent << "kinova_s: ";
    Printer<int64_t>::stream(s, indent + "  ", v.kinova_s);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINOVASEV_MESSAGE_KINOVA_JOINTVELOCITYREQUEST_H
