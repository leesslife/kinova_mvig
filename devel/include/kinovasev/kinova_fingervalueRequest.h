// Generated by gencpp from file kinovasev/kinova_fingervalueRequest.msg
// DO NOT EDIT!


#ifndef KINOVASEV_MESSAGE_KINOVA_FINGERVALUEREQUEST_H
#define KINOVASEV_MESSAGE_KINOVA_FINGERVALUEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kinovasev
{
template <class ContainerAllocator>
struct kinova_fingervalueRequest_
{
  typedef kinova_fingervalueRequest_<ContainerAllocator> Type;

  kinova_fingervalueRequest_()
    : unit()
    , finger_value()
    , relative_(false)  {
    }
  kinova_fingervalueRequest_(const ContainerAllocator& _alloc)
    : unit(_alloc)
    , finger_value(_alloc)
    , relative_(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _unit_type;
  _unit_type unit;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _finger_value_type;
  _finger_value_type finger_value;

   typedef uint8_t _relative__type;
  _relative__type relative_;





  typedef boost::shared_ptr< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> const> ConstPtr;

}; // struct kinova_fingervalueRequest_

typedef ::kinovasev::kinova_fingervalueRequest_<std::allocator<void> > kinova_fingervalueRequest;

typedef boost::shared_ptr< ::kinovasev::kinova_fingervalueRequest > kinova_fingervalueRequestPtr;
typedef boost::shared_ptr< ::kinovasev::kinova_fingervalueRequest const> kinova_fingervalueRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator1> & lhs, const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator2> & rhs)
{
  return lhs.unit == rhs.unit &&
    lhs.finger_value == rhs.finger_value &&
    lhs.relative_ == rhs.relative_;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator1> & lhs, const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kinovasev

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "06e62ecdf5356283e71d200fa2ffdba0";
  }

  static const char* value(const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x06e62ecdf5356283ULL;
  static const uint64_t static_value2 = 0xe71d200fa2ffdba0ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kinovasev/kinova_fingervalueRequest";
  }

  static const char* value(const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string unit\n"
"float32[] finger_value\n"
"bool relative_\n"
;
  }

  static const char* value(const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.unit);
      stream.next(m.finger_value);
      stream.next(m.relative_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kinova_fingervalueRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kinovasev::kinova_fingervalueRequest_<ContainerAllocator>& v)
  {
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.unit);
    s << indent << "finger_value[]" << std::endl;
    for (size_t i = 0; i < v.finger_value.size(); ++i)
    {
      s << indent << "  finger_value[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.finger_value[i]);
    }
    s << indent << "relative_: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative_);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINOVASEV_MESSAGE_KINOVA_FINGERVALUEREQUEST_H
