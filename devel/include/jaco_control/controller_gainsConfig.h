//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the jaco_control package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __jaco_control__CONTROLLER_GAINSCONFIG_H__
#define __jaco_control__CONTROLLER_GAINSCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace jaco_control
{
  class controller_gainsConfigStatics;

  class controller_gainsConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(controller_gainsConfig &config, const controller_gainsConfig &max, const controller_gainsConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const controller_gainsConfig &config1, const controller_gainsConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, controller_gainsConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const controller_gainsConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, controller_gainsConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const controller_gainsConfig &config) const = 0;
      virtual void getValue(const controller_gainsConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T controller_gainsConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T controller_gainsConfig::* field;

      virtual void clamp(controller_gainsConfig &config, const controller_gainsConfig &max, const controller_gainsConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const controller_gainsConfig &config1, const controller_gainsConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, controller_gainsConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const controller_gainsConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, controller_gainsConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const controller_gainsConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const controller_gainsConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, controller_gainsConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, controller_gainsConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<controller_gainsConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(controller_gainsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class VELOCITY_CONTROLLER_GAINS
{
  public:
    VELOCITY_CONTROLLER_GAINS()
    {
      state = true;
      name = "Velocity_Controller_Gains";
    }

    void setParams(controller_gainsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("velocity_K_p_1"==(*_i)->name){velocity_K_p_1 = boost::any_cast<double>(val);}
        if("velocity_K_p_2"==(*_i)->name){velocity_K_p_2 = boost::any_cast<double>(val);}
        if("velocity_K_p_3"==(*_i)->name){velocity_K_p_3 = boost::any_cast<double>(val);}
        if("velocity_K_p_4"==(*_i)->name){velocity_K_p_4 = boost::any_cast<double>(val);}
        if("velocity_K_p_5"==(*_i)->name){velocity_K_p_5 = boost::any_cast<double>(val);}
        if("velocity_K_p_6"==(*_i)->name){velocity_K_p_6 = boost::any_cast<double>(val);}
        if("velocity_K_p_7"==(*_i)->name){velocity_K_p_7 = boost::any_cast<double>(val);}
        if("velocity_K_d_1"==(*_i)->name){velocity_K_d_1 = boost::any_cast<double>(val);}
        if("velocity_K_d_2"==(*_i)->name){velocity_K_d_2 = boost::any_cast<double>(val);}
        if("velocity_K_d_3"==(*_i)->name){velocity_K_d_3 = boost::any_cast<double>(val);}
        if("velocity_K_d_4"==(*_i)->name){velocity_K_d_4 = boost::any_cast<double>(val);}
        if("velocity_K_d_5"==(*_i)->name){velocity_K_d_5 = boost::any_cast<double>(val);}
        if("velocity_K_d_6"==(*_i)->name){velocity_K_d_6 = boost::any_cast<double>(val);}
        if("velocity_K_d_7"==(*_i)->name){velocity_K_d_7 = boost::any_cast<double>(val);}
      }
    }

    double velocity_K_p_1;
double velocity_K_p_2;
double velocity_K_p_3;
double velocity_K_p_4;
double velocity_K_p_5;
double velocity_K_p_6;
double velocity_K_p_7;
double velocity_K_d_1;
double velocity_K_d_2;
double velocity_K_d_3;
double velocity_K_d_4;
double velocity_K_d_5;
double velocity_K_d_6;
double velocity_K_d_7;

    bool state;
    std::string name;

    
}velocity_controller_gains;

class FEEDFORWARD_TORQUE_CONTROLLER_GAINS
{
  public:
    FEEDFORWARD_TORQUE_CONTROLLER_GAINS()
    {
      state = true;
      name = "Feedforward_Torque_Controller_Gains";
    }

    void setParams(controller_gainsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("fftorque_K_p_1"==(*_i)->name){fftorque_K_p_1 = boost::any_cast<double>(val);}
        if("fftorque_K_p_2"==(*_i)->name){fftorque_K_p_2 = boost::any_cast<double>(val);}
        if("fftorque_K_p_3"==(*_i)->name){fftorque_K_p_3 = boost::any_cast<double>(val);}
        if("fftorque_K_p_4"==(*_i)->name){fftorque_K_p_4 = boost::any_cast<double>(val);}
        if("fftorque_K_p_5"==(*_i)->name){fftorque_K_p_5 = boost::any_cast<double>(val);}
        if("fftorque_K_p_6"==(*_i)->name){fftorque_K_p_6 = boost::any_cast<double>(val);}
        if("fftorque_K_p_7"==(*_i)->name){fftorque_K_p_7 = boost::any_cast<double>(val);}
        if("fftorque_K_d_1"==(*_i)->name){fftorque_K_d_1 = boost::any_cast<double>(val);}
        if("fftorque_K_d_2"==(*_i)->name){fftorque_K_d_2 = boost::any_cast<double>(val);}
        if("fftorque_K_d_3"==(*_i)->name){fftorque_K_d_3 = boost::any_cast<double>(val);}
        if("fftorque_K_d_4"==(*_i)->name){fftorque_K_d_4 = boost::any_cast<double>(val);}
        if("fftorque_K_d_5"==(*_i)->name){fftorque_K_d_5 = boost::any_cast<double>(val);}
        if("fftorque_K_d_6"==(*_i)->name){fftorque_K_d_6 = boost::any_cast<double>(val);}
        if("fftorque_K_d_7"==(*_i)->name){fftorque_K_d_7 = boost::any_cast<double>(val);}
      }
    }

    double fftorque_K_p_1;
double fftorque_K_p_2;
double fftorque_K_p_3;
double fftorque_K_p_4;
double fftorque_K_p_5;
double fftorque_K_p_6;
double fftorque_K_p_7;
double fftorque_K_d_1;
double fftorque_K_d_2;
double fftorque_K_d_3;
double fftorque_K_d_4;
double fftorque_K_d_5;
double fftorque_K_d_6;
double fftorque_K_d_7;

    bool state;
    std::string name;

    
}feedforward_torque_controller_gains;

class IMPEDANCE_CONTROLLER_TASK_SPACE_GAINS
{
  public:
    IMPEDANCE_CONTROLLER_TASK_SPACE_GAINS()
    {
      state = true;
      name = "Impedance_Controller_Task_Space_Gains";
    }

    void setParams(controller_gainsConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("impedance_K_p_x"==(*_i)->name){impedance_K_p_x = boost::any_cast<double>(val);}
        if("impedance_K_p_y"==(*_i)->name){impedance_K_p_y = boost::any_cast<double>(val);}
        if("impedance_K_p_z"==(*_i)->name){impedance_K_p_z = boost::any_cast<double>(val);}
        if("impedance_K_p_w_x"==(*_i)->name){impedance_K_p_w_x = boost::any_cast<double>(val);}
        if("impedance_K_p_w_y"==(*_i)->name){impedance_K_p_w_y = boost::any_cast<double>(val);}
        if("impedance_K_p_w_z"==(*_i)->name){impedance_K_p_w_z = boost::any_cast<double>(val);}
        if("impedance_K_d_x"==(*_i)->name){impedance_K_d_x = boost::any_cast<double>(val);}
        if("impedance_K_d_y"==(*_i)->name){impedance_K_d_y = boost::any_cast<double>(val);}
        if("impedance_K_d_z"==(*_i)->name){impedance_K_d_z = boost::any_cast<double>(val);}
        if("impedance_K_d_w_x"==(*_i)->name){impedance_K_d_w_x = boost::any_cast<double>(val);}
        if("impedance_K_d_w_y"==(*_i)->name){impedance_K_d_w_y = boost::any_cast<double>(val);}
        if("impedance_K_d_w_z"==(*_i)->name){impedance_K_d_w_z = boost::any_cast<double>(val);}
      }
    }

    double impedance_K_p_x;
double impedance_K_p_y;
double impedance_K_p_z;
double impedance_K_p_w_x;
double impedance_K_p_w_y;
double impedance_K_p_w_z;
double impedance_K_d_x;
double impedance_K_d_y;
double impedance_K_d_z;
double impedance_K_d_w_x;
double impedance_K_d_w_y;
double impedance_K_d_w_z;

    bool state;
    std::string name;

    
}impedance_controller_task_space_gains;

}groups;



//#line 19 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_p_1;
//#line 20 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_p_2;
//#line 21 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_p_3;
//#line 22 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_p_4;
//#line 23 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_p_5;
//#line 24 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_p_6;
//#line 25 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_p_7;
//#line 28 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_d_1;
//#line 29 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_d_2;
//#line 30 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_d_3;
//#line 31 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_d_4;
//#line 32 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_d_5;
//#line 33 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_d_6;
//#line 34 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double velocity_K_d_7;
//#line 40 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_p_1;
//#line 41 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_p_2;
//#line 42 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_p_3;
//#line 43 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_p_4;
//#line 44 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_p_5;
//#line 45 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_p_6;
//#line 46 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_p_7;
//#line 49 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_d_1;
//#line 50 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_d_2;
//#line 51 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_d_3;
//#line 52 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_d_4;
//#line 53 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_d_5;
//#line 54 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_d_6;
//#line 55 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double fftorque_K_d_7;
//#line 61 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_p_x;
//#line 62 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_p_y;
//#line 63 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_p_z;
//#line 64 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_p_w_x;
//#line 65 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_p_w_y;
//#line 66 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_p_w_z;
//#line 69 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_d_x;
//#line 70 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_d_y;
//#line 71 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_d_z;
//#line 72 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_d_w_x;
//#line 73 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_d_w_y;
//#line 74 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      double impedance_K_d_w_z;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("controller_gainsConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const controller_gainsConfig &__max__ = __getMax__();
      const controller_gainsConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const controller_gainsConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const controller_gainsConfig &__getDefault__();
    static const controller_gainsConfig &__getMax__();
    static const controller_gainsConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const controller_gainsConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void controller_gainsConfig::ParamDescription<std::string>::clamp(controller_gainsConfig &config, const controller_gainsConfig &max, const controller_gainsConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class controller_gainsConfigStatics
  {
    friend class controller_gainsConfig;

    controller_gainsConfigStatics()
    {
controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT, controller_gainsConfig> Default("Default", "", 0, 0, true, &controller_gainsConfig::groups);
controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::VELOCITY_CONTROLLER_GAINS, controller_gainsConfig::DEFAULT> Velocity_Controller_Gains("Velocity_Controller_Gains", "", 0, 1, true, &controller_gainsConfig::DEFAULT::velocity_controller_gains);
//#line 19 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_p_1 = 0.0;
//#line 19 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_p_1 = 200.0;
//#line 19 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_p_1 = 5.0;
//#line 19 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_1", "double", 0, "Velocity controller: P gain for joint 1", "", &controller_gainsConfig::velocity_K_p_1)));
//#line 19 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_1", "double", 0, "Velocity controller: P gain for joint 1", "", &controller_gainsConfig::velocity_K_p_1)));
//#line 20 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_p_2 = 0.0;
//#line 20 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_p_2 = 200.0;
//#line 20 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_p_2 = 5.0;
//#line 20 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_2", "double", 0, "Velocity controller: P gain for joint 2", "", &controller_gainsConfig::velocity_K_p_2)));
//#line 20 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_2", "double", 0, "Velocity controller: P gain for joint 2", "", &controller_gainsConfig::velocity_K_p_2)));
//#line 21 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_p_3 = 0.0;
//#line 21 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_p_3 = 200.0;
//#line 21 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_p_3 = 5.0;
//#line 21 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_3", "double", 0, "Velocity controller: P gain for joint 3", "", &controller_gainsConfig::velocity_K_p_3)));
//#line 21 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_3", "double", 0, "Velocity controller: P gain for joint 3", "", &controller_gainsConfig::velocity_K_p_3)));
//#line 22 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_p_4 = 0.0;
//#line 22 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_p_4 = 200.0;
//#line 22 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_p_4 = 5.0;
//#line 22 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_4", "double", 0, "Velocity controller: P gain for joint 4", "", &controller_gainsConfig::velocity_K_p_4)));
//#line 22 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_4", "double", 0, "Velocity controller: P gain for joint 4", "", &controller_gainsConfig::velocity_K_p_4)));
//#line 23 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_p_5 = 0.0;
//#line 23 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_p_5 = 200.0;
//#line 23 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_p_5 = 5.0;
//#line 23 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_5", "double", 0, "Velocity controller: P gain for joint 5", "", &controller_gainsConfig::velocity_K_p_5)));
//#line 23 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_5", "double", 0, "Velocity controller: P gain for joint 5", "", &controller_gainsConfig::velocity_K_p_5)));
//#line 24 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_p_6 = 0.0;
//#line 24 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_p_6 = 200.0;
//#line 24 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_p_6 = 5.0;
//#line 24 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_6", "double", 0, "Velocity controller: P gain for joint 6", "", &controller_gainsConfig::velocity_K_p_6)));
//#line 24 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_6", "double", 0, "Velocity controller: P gain for joint 6", "", &controller_gainsConfig::velocity_K_p_6)));
//#line 25 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_p_7 = 0.0;
//#line 25 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_p_7 = 200.0;
//#line 25 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_p_7 = 5.0;
//#line 25 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_7", "double", 0, "Velocity controller: P gain for joint 7", "", &controller_gainsConfig::velocity_K_p_7)));
//#line 25 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_p_7", "double", 0, "Velocity controller: P gain for joint 7", "", &controller_gainsConfig::velocity_K_p_7)));
//#line 28 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_d_1 = 0.0;
//#line 28 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_d_1 = 50.0;
//#line 28 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_d_1 = 1.0;
//#line 28 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_1", "double", 0, "Velocity controller: D gain for joint 1", "", &controller_gainsConfig::velocity_K_d_1)));
//#line 28 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_1", "double", 0, "Velocity controller: D gain for joint 1", "", &controller_gainsConfig::velocity_K_d_1)));
//#line 29 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_d_2 = 0.0;
//#line 29 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_d_2 = 50.0;
//#line 29 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_d_2 = 1.0;
//#line 29 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_2", "double", 0, "Velocity controller: D gain for joint 2", "", &controller_gainsConfig::velocity_K_d_2)));
//#line 29 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_2", "double", 0, "Velocity controller: D gain for joint 2", "", &controller_gainsConfig::velocity_K_d_2)));
//#line 30 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_d_3 = 0.0;
//#line 30 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_d_3 = 50.0;
//#line 30 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_d_3 = 1.0;
//#line 30 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_3", "double", 0, "Velocity controller: D gain for joint 3", "", &controller_gainsConfig::velocity_K_d_3)));
//#line 30 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_3", "double", 0, "Velocity controller: D gain for joint 3", "", &controller_gainsConfig::velocity_K_d_3)));
//#line 31 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_d_4 = 0.0;
//#line 31 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_d_4 = 50.0;
//#line 31 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_d_4 = 1.0;
//#line 31 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_4", "double", 0, "Velocity controller: D gain for joint 4", "", &controller_gainsConfig::velocity_K_d_4)));
//#line 31 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_4", "double", 0, "Velocity controller: D gain for joint 4", "", &controller_gainsConfig::velocity_K_d_4)));
//#line 32 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_d_5 = 0.0;
//#line 32 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_d_5 = 50.0;
//#line 32 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_d_5 = 1.0;
//#line 32 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_5", "double", 0, "Velocity controller: D gain for joint 5", "", &controller_gainsConfig::velocity_K_d_5)));
//#line 32 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_5", "double", 0, "Velocity controller: D gain for joint 5", "", &controller_gainsConfig::velocity_K_d_5)));
//#line 33 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_d_6 = 0.0;
//#line 33 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_d_6 = 50.0;
//#line 33 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_d_6 = 1.0;
//#line 33 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_6", "double", 0, "Velocity controller: D gain for joint 6", "", &controller_gainsConfig::velocity_K_d_6)));
//#line 33 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_6", "double", 0, "Velocity controller: D gain for joint 6", "", &controller_gainsConfig::velocity_K_d_6)));
//#line 34 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.velocity_K_d_7 = 0.0;
//#line 34 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.velocity_K_d_7 = 50.0;
//#line 34 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.velocity_K_d_7 = 1.0;
//#line 34 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Velocity_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_7", "double", 0, "Velocity controller: D gain for joint 7", "", &controller_gainsConfig::velocity_K_d_7)));
//#line 34 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("velocity_K_d_7", "double", 0, "Velocity controller: D gain for joint 7", "", &controller_gainsConfig::velocity_K_d_7)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Velocity_Controller_Gains.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_gainsConfig::AbstractGroupDescriptionConstPtr(new controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::VELOCITY_CONTROLLER_GAINS, controller_gainsConfig::DEFAULT>(Velocity_Controller_Gains)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_gainsConfig::AbstractGroupDescriptionConstPtr(new controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::VELOCITY_CONTROLLER_GAINS, controller_gainsConfig::DEFAULT>(Velocity_Controller_Gains)));
controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::FEEDFORWARD_TORQUE_CONTROLLER_GAINS, controller_gainsConfig::DEFAULT> Feedforward_Torque_Controller_Gains("Feedforward_Torque_Controller_Gains", "", 0, 2, true, &controller_gainsConfig::DEFAULT::feedforward_torque_controller_gains);
//#line 40 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_p_1 = 0.0;
//#line 40 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_p_1 = 200.0;
//#line 40 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_p_1 = 45.0;
//#line 40 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_1", "double", 0, "Feedforward torque controller: P gain for joint 1", "", &controller_gainsConfig::fftorque_K_p_1)));
//#line 40 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_1", "double", 0, "Feedforward torque controller: P gain for joint 1", "", &controller_gainsConfig::fftorque_K_p_1)));
//#line 41 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_p_2 = 0.0;
//#line 41 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_p_2 = 200.0;
//#line 41 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_p_2 = 45.0;
//#line 41 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_2", "double", 0, "Feedforward torque controller: P gain for joint 2", "", &controller_gainsConfig::fftorque_K_p_2)));
//#line 41 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_2", "double", 0, "Feedforward torque controller: P gain for joint 2", "", &controller_gainsConfig::fftorque_K_p_2)));
//#line 42 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_p_3 = 0.0;
//#line 42 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_p_3 = 200.0;
//#line 42 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_p_3 = 45.0;
//#line 42 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_3", "double", 0, "Feedforward torque controller: P gain for joint 3", "", &controller_gainsConfig::fftorque_K_p_3)));
//#line 42 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_3", "double", 0, "Feedforward torque controller: P gain for joint 3", "", &controller_gainsConfig::fftorque_K_p_3)));
//#line 43 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_p_4 = 0.0;
//#line 43 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_p_4 = 200.0;
//#line 43 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_p_4 = 10.0;
//#line 43 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_4", "double", 0, "Feedforward torque controller: P gain for joint 4", "", &controller_gainsConfig::fftorque_K_p_4)));
//#line 43 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_4", "double", 0, "Feedforward torque controller: P gain for joint 4", "", &controller_gainsConfig::fftorque_K_p_4)));
//#line 44 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_p_5 = 0.0;
//#line 44 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_p_5 = 200.0;
//#line 44 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_p_5 = 10.0;
//#line 44 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_5", "double", 0, "Feedforward torque controller: P gain for joint 5", "", &controller_gainsConfig::fftorque_K_p_5)));
//#line 44 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_5", "double", 0, "Feedforward torque controller: P gain for joint 5", "", &controller_gainsConfig::fftorque_K_p_5)));
//#line 45 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_p_6 = 0.0;
//#line 45 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_p_6 = 200.0;
//#line 45 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_p_6 = 10.0;
//#line 45 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_6", "double", 0, "Feedforward torque controller: P gain for joint 6", "", &controller_gainsConfig::fftorque_K_p_6)));
//#line 45 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_6", "double", 0, "Feedforward torque controller: P gain for joint 6", "", &controller_gainsConfig::fftorque_K_p_6)));
//#line 46 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_p_7 = 0.0;
//#line 46 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_p_7 = 200.0;
//#line 46 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_p_7 = 10.0;
//#line 46 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_7", "double", 0, "Feedforward torque controller: P gain for joint 7", "", &controller_gainsConfig::fftorque_K_p_7)));
//#line 46 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_p_7", "double", 0, "Feedforward torque controller: P gain for joint 7", "", &controller_gainsConfig::fftorque_K_p_7)));
//#line 49 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_d_1 = 0.0;
//#line 49 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_d_1 = 50.0;
//#line 49 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_d_1 = 4.0;
//#line 49 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_1", "double", 0, "Feedforward torque controller: D gain for joint 1", "", &controller_gainsConfig::fftorque_K_d_1)));
//#line 49 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_1", "double", 0, "Feedforward torque controller: D gain for joint 1", "", &controller_gainsConfig::fftorque_K_d_1)));
//#line 50 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_d_2 = 0.0;
//#line 50 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_d_2 = 50.0;
//#line 50 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_d_2 = 4.0;
//#line 50 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_2", "double", 0, "Feedforward torque controller: D gain for joint 2", "", &controller_gainsConfig::fftorque_K_d_2)));
//#line 50 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_2", "double", 0, "Feedforward torque controller: D gain for joint 2", "", &controller_gainsConfig::fftorque_K_d_2)));
//#line 51 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_d_3 = 0.0;
//#line 51 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_d_3 = 50.0;
//#line 51 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_d_3 = 4.0;
//#line 51 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_3", "double", 0, "Feedforward torque controller: D gain for joint 3", "", &controller_gainsConfig::fftorque_K_d_3)));
//#line 51 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_3", "double", 0, "Feedforward torque controller: D gain for joint 3", "", &controller_gainsConfig::fftorque_K_d_3)));
//#line 52 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_d_4 = 0.0;
//#line 52 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_d_4 = 50.0;
//#line 52 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_d_4 = 1.5;
//#line 52 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_4", "double", 0, "Feedforward torque controller: D gain for joint 4", "", &controller_gainsConfig::fftorque_K_d_4)));
//#line 52 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_4", "double", 0, "Feedforward torque controller: D gain for joint 4", "", &controller_gainsConfig::fftorque_K_d_4)));
//#line 53 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_d_5 = 0.0;
//#line 53 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_d_5 = 50.0;
//#line 53 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_d_5 = 1.5;
//#line 53 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_5", "double", 0, "Feedforward torque controller: D gain for joint 5", "", &controller_gainsConfig::fftorque_K_d_5)));
//#line 53 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_5", "double", 0, "Feedforward torque controller: D gain for joint 5", "", &controller_gainsConfig::fftorque_K_d_5)));
//#line 54 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_d_6 = 0.0;
//#line 54 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_d_6 = 50.0;
//#line 54 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_d_6 = 1.5;
//#line 54 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_6", "double", 0, "Feedforward torque controller: D gain for joint 6", "", &controller_gainsConfig::fftorque_K_d_6)));
//#line 54 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_6", "double", 0, "Feedforward torque controller: D gain for joint 6", "", &controller_gainsConfig::fftorque_K_d_6)));
//#line 55 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.fftorque_K_d_7 = 0.0;
//#line 55 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.fftorque_K_d_7 = 50.0;
//#line 55 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.fftorque_K_d_7 = 1.5;
//#line 55 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Feedforward_Torque_Controller_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_7", "double", 0, "Feedforward torque controller: D gain for joint 7", "", &controller_gainsConfig::fftorque_K_d_7)));
//#line 55 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("fftorque_K_d_7", "double", 0, "Feedforward torque controller: D gain for joint 7", "", &controller_gainsConfig::fftorque_K_d_7)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Feedforward_Torque_Controller_Gains.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_gainsConfig::AbstractGroupDescriptionConstPtr(new controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::FEEDFORWARD_TORQUE_CONTROLLER_GAINS, controller_gainsConfig::DEFAULT>(Feedforward_Torque_Controller_Gains)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_gainsConfig::AbstractGroupDescriptionConstPtr(new controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::FEEDFORWARD_TORQUE_CONTROLLER_GAINS, controller_gainsConfig::DEFAULT>(Feedforward_Torque_Controller_Gains)));
controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::IMPEDANCE_CONTROLLER_TASK_SPACE_GAINS, controller_gainsConfig::DEFAULT> Impedance_Controller_Task_Space_Gains("Impedance_Controller_Task_Space_Gains", "", 0, 3, true, &controller_gainsConfig::DEFAULT::impedance_controller_task_space_gains);
//#line 61 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_p_x = 0.0;
//#line 61 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_p_x = 200.0;
//#line 61 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_p_x = 10.0;
//#line 61 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_x", "double", 0, "Impedance controller: P gain for x", "", &controller_gainsConfig::impedance_K_p_x)));
//#line 61 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_x", "double", 0, "Impedance controller: P gain for x", "", &controller_gainsConfig::impedance_K_p_x)));
//#line 62 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_p_y = 0.0;
//#line 62 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_p_y = 200.0;
//#line 62 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_p_y = 10.0;
//#line 62 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_y", "double", 0, "Impedance controller: P gain for y", "", &controller_gainsConfig::impedance_K_p_y)));
//#line 62 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_y", "double", 0, "Impedance controller: P gain for y", "", &controller_gainsConfig::impedance_K_p_y)));
//#line 63 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_p_z = 0.0;
//#line 63 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_p_z = 200.0;
//#line 63 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_p_z = 10.0;
//#line 63 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_z", "double", 0, "Impedance controller: P gain for z", "", &controller_gainsConfig::impedance_K_p_z)));
//#line 63 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_z", "double", 0, "Impedance controller: P gain for z", "", &controller_gainsConfig::impedance_K_p_z)));
//#line 64 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_p_w_x = 0.0;
//#line 64 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_p_w_x = 200.0;
//#line 64 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_p_w_x = 10.0;
//#line 64 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_w_x", "double", 0, "Impedance controller: P gain for w_x", "", &controller_gainsConfig::impedance_K_p_w_x)));
//#line 64 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_w_x", "double", 0, "Impedance controller: P gain for w_x", "", &controller_gainsConfig::impedance_K_p_w_x)));
//#line 65 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_p_w_y = 0.0;
//#line 65 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_p_w_y = 200.0;
//#line 65 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_p_w_y = 10.0;
//#line 65 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_w_y", "double", 0, "Impedance controller: P gain for w_y", "", &controller_gainsConfig::impedance_K_p_w_y)));
//#line 65 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_w_y", "double", 0, "Impedance controller: P gain for w_y", "", &controller_gainsConfig::impedance_K_p_w_y)));
//#line 66 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_p_w_z = 0.0;
//#line 66 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_p_w_z = 200.0;
//#line 66 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_p_w_z = 10.0;
//#line 66 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_w_z", "double", 0, "Impedance controller: P gain for w_z", "", &controller_gainsConfig::impedance_K_p_w_z)));
//#line 66 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_p_w_z", "double", 0, "Impedance controller: P gain for w_z", "", &controller_gainsConfig::impedance_K_p_w_z)));
//#line 69 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_d_x = 0.0;
//#line 69 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_d_x = 50.0;
//#line 69 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_d_x = 1.0;
//#line 69 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_x", "double", 0, "Impedance controller: D gain for x", "", &controller_gainsConfig::impedance_K_d_x)));
//#line 69 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_x", "double", 0, "Impedance controller: D gain for x", "", &controller_gainsConfig::impedance_K_d_x)));
//#line 70 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_d_y = 0.0;
//#line 70 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_d_y = 50.0;
//#line 70 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_d_y = 1.0;
//#line 70 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_y", "double", 0, "Impedance controller: D gain for y", "", &controller_gainsConfig::impedance_K_d_y)));
//#line 70 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_y", "double", 0, "Impedance controller: D gain for y", "", &controller_gainsConfig::impedance_K_d_y)));
//#line 71 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_d_z = 0.0;
//#line 71 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_d_z = 50.0;
//#line 71 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_d_z = 1.0;
//#line 71 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_z", "double", 0, "Impedance controller: D gain for z", "", &controller_gainsConfig::impedance_K_d_z)));
//#line 71 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_z", "double", 0, "Impedance controller: D gain for z", "", &controller_gainsConfig::impedance_K_d_z)));
//#line 72 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_d_w_x = 0.0;
//#line 72 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_d_w_x = 50.0;
//#line 72 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_d_w_x = 1.0;
//#line 72 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_w_x", "double", 0, "Impedance controller: D gain for w_x", "", &controller_gainsConfig::impedance_K_d_w_x)));
//#line 72 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_w_x", "double", 0, "Impedance controller: D gain for w_x", "", &controller_gainsConfig::impedance_K_d_w_x)));
//#line 73 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_d_w_y = 0.0;
//#line 73 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_d_w_y = 50.0;
//#line 73 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_d_w_y = 1.0;
//#line 73 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_w_y", "double", 0, "Impedance controller: D gain for w_y", "", &controller_gainsConfig::impedance_K_d_w_y)));
//#line 73 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_w_y", "double", 0, "Impedance controller: D gain for w_y", "", &controller_gainsConfig::impedance_K_d_w_y)));
//#line 74 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __min__.impedance_K_d_w_z = 0.0;
//#line 74 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __max__.impedance_K_d_w_z = 50.0;
//#line 74 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __default__.impedance_K_d_w_z = 1.0;
//#line 74 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      Impedance_Controller_Task_Space_Gains.abstract_parameters.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_w_z", "double", 0, "Impedance controller: D gain for w_z", "", &controller_gainsConfig::impedance_K_d_w_z)));
//#line 74 "/home/ziye01/kinova_mvig/src/jaco_control/cfg/controller_gains.cfg"
      __param_descriptions__.push_back(controller_gainsConfig::AbstractParamDescriptionConstPtr(new controller_gainsConfig::ParamDescription<double>("impedance_K_d_w_z", "double", 0, "Impedance controller: D gain for w_z", "", &controller_gainsConfig::impedance_K_d_w_z)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Impedance_Controller_Task_Space_Gains.convertParams();
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(controller_gainsConfig::AbstractGroupDescriptionConstPtr(new controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::IMPEDANCE_CONTROLLER_TASK_SPACE_GAINS, controller_gainsConfig::DEFAULT>(Impedance_Controller_Task_Space_Gains)));
//#line 124 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_gainsConfig::AbstractGroupDescriptionConstPtr(new controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT::IMPEDANCE_CONTROLLER_TASK_SPACE_GAINS, controller_gainsConfig::DEFAULT>(Impedance_Controller_Task_Space_Gains)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(controller_gainsConfig::AbstractGroupDescriptionConstPtr(new controller_gainsConfig::GroupDescription<controller_gainsConfig::DEFAULT, controller_gainsConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<controller_gainsConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<controller_gainsConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<controller_gainsConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    controller_gainsConfig __max__;
    controller_gainsConfig __min__;
    controller_gainsConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const controller_gainsConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static controller_gainsConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &controller_gainsConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const controller_gainsConfig &controller_gainsConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const controller_gainsConfig &controller_gainsConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const controller_gainsConfig &controller_gainsConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<controller_gainsConfig::AbstractParamDescriptionConstPtr> &controller_gainsConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<controller_gainsConfig::AbstractGroupDescriptionConstPtr> &controller_gainsConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const controller_gainsConfigStatics *controller_gainsConfig::__get_statics__()
  {
    const static controller_gainsConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = controller_gainsConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __CONTROLLER_GAINSRECONFIGURATOR_H__
