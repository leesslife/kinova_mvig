// Generated by gencpp from file jaco_control/InteractionParams.msg
// DO NOT EDIT!


#ifndef JACO_CONTROL_MESSAGE_INTERACTIONPARAMS_H
#define JACO_CONTROL_MESSAGE_INTERACTIONPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace jaco_control
{
template <class ContainerAllocator>
struct InteractionParams_
{
  typedef InteractionParams_<ContainerAllocator> Type;

  InteractionParams_()
    : center()
    , radius(0.0)
    , cut_force_k(0.0)
    , cut_force_d(0.0)
    , direction()
    , plane()  {
    }
  InteractionParams_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , radius(0.0)
    , cut_force_k(0.0)
    , cut_force_d(0.0)
    , direction(_alloc)
    , plane(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef double _radius_type;
  _radius_type radius;

   typedef double _cut_force_k_type;
  _cut_force_k_type cut_force_k;

   typedef double _cut_force_d_type;
  _cut_force_d_type cut_force_d;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _direction_type;
  _direction_type direction;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _plane_type;
  _plane_type plane;





  typedef boost::shared_ptr< ::jaco_control::InteractionParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaco_control::InteractionParams_<ContainerAllocator> const> ConstPtr;

}; // struct InteractionParams_

typedef ::jaco_control::InteractionParams_<std::allocator<void> > InteractionParams;

typedef boost::shared_ptr< ::jaco_control::InteractionParams > InteractionParamsPtr;
typedef boost::shared_ptr< ::jaco_control::InteractionParams const> InteractionParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jaco_control::InteractionParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jaco_control::InteractionParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jaco_control::InteractionParams_<ContainerAllocator1> & lhs, const ::jaco_control::InteractionParams_<ContainerAllocator2> & rhs)
{
  return lhs.center == rhs.center &&
    lhs.radius == rhs.radius &&
    lhs.cut_force_k == rhs.cut_force_k &&
    lhs.cut_force_d == rhs.cut_force_d &&
    lhs.direction == rhs.direction &&
    lhs.plane == rhs.plane;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jaco_control::InteractionParams_<ContainerAllocator1> & lhs, const ::jaco_control::InteractionParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jaco_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jaco_control::InteractionParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jaco_control::InteractionParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaco_control::InteractionParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jaco_control::InteractionParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaco_control::InteractionParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jaco_control::InteractionParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jaco_control::InteractionParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51a6ad46b6075e569062a950d4a73881";
  }

  static const char* value(const ::jaco_control::InteractionParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51a6ad46b6075e56ULL;
  static const uint64_t static_value2 = 0x9062a950d4a73881ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaco_control::InteractionParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jaco_control/InteractionParams";
  }

  static const char* value(const ::jaco_control::InteractionParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jaco_control::InteractionParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point center\n"
"float64 radius\n"
"float64 cut_force_k\n"
"float64 cut_force_d\n"
"geometry_msgs/Vector3 direction\n"
"geometry_msgs/Vector3 plane\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::jaco_control::InteractionParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jaco_control::InteractionParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.radius);
      stream.next(m.cut_force_k);
      stream.next(m.cut_force_d);
      stream.next(m.direction);
      stream.next(m.plane);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InteractionParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jaco_control::InteractionParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jaco_control::InteractionParams_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "cut_force_k: ";
    Printer<double>::stream(s, indent + "  ", v.cut_force_k);
    s << indent << "cut_force_d: ";
    Printer<double>::stream(s, indent + "  ", v.cut_force_d);
    s << indent << "direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.direction);
    s << indent << "plane: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.plane);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JACO_CONTROL_MESSAGE_INTERACTIONPARAMS_H
