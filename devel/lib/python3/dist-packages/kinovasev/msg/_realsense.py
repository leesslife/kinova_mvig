# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinovasev/realsense.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class realsense(genpy.Message):
  _md5sum = "277fc24e512a5e4fd934ce478ad44fa1"
  _type = "kinovasev/realsense"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32      startid
float64[16]  startH
int32      endid
float64[16]  endH"""
  __slots__ = ['startid','startH','endid','endH']
  _slot_types = ['int32','float64[16]','int32','float64[16]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       startid,startH,endid,endH

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(realsense, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.startid is None:
        self.startid = 0
      if self.startH is None:
        self.startH = [0.] * 16
      if self.endid is None:
        self.endid = 0
      if self.endH is None:
        self.endH = [0.] * 16
    else:
      self.startid = 0
      self.startH = [0.] * 16
      self.endid = 0
      self.endH = [0.] * 16

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.startid
      buff.write(_get_struct_i().pack(_x))
      buff.write(_get_struct_16d().pack(*self.startH))
      _x = self.endid
      buff.write(_get_struct_i().pack(_x))
      buff.write(_get_struct_16d().pack(*self.endH))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.startid,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 128
      self.startH = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 4
      (self.endid,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 128
      self.endH = _get_struct_16d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.startid
      buff.write(_get_struct_i().pack(_x))
      buff.write(self.startH.tostring())
      _x = self.endid
      buff.write(_get_struct_i().pack(_x))
      buff.write(self.endH.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.startid,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 128
      self.startH = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 4
      (self.endid,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 128
      self.endH = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
